### YamlMime:ManagedReference
items:
- uid: Xunit.AssertEx
  commentId: T:Xunit.AssertEx
  id: AssertEx
  parent: Xunit
  children:
  - Xunit.AssertEx.AsDynamic``1(``0)
  - Xunit.AssertEx.IsFalse(System.Boolean)
  - Xunit.AssertEx.IsInstanceOf``1(System.Object)
  - Xunit.AssertEx.IsNotInstanceOf``1(System.Object)
  - Xunit.AssertEx.IsNotNull``1(``0)
  - Xunit.AssertEx.IsNotSameReferenceAs``1(``0,``0)
  - Xunit.AssertEx.IsNotStructuralEqual(System.Object,System.Object,System.String)
  - Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - Xunit.AssertEx.IsNot``1(``0,``0)
  - Xunit.AssertEx.IsNot``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  - Xunit.AssertEx.IsNull``1(``0)
  - Xunit.AssertEx.IsSameReferenceAs``1(``0,``0)
  - Xunit.AssertEx.IsStructuralEqual(System.Object,System.Object,System.String)
  - Xunit.AssertEx.IsTrue(System.Boolean)
  - Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - Xunit.AssertEx.Is``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  - Xunit.AssertEx.Is``1(``0,``0)
  - Xunit.AssertEx.Is``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  langs:
  - csharp
  - vb
  name: AssertEx
  nameWithType: AssertEx
  fullName: Xunit.AssertEx
  type: Class
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: AssertEx
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 137
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  syntax:
    content: >-
      [ContractVerification(false)]

      public static class AssertEx
    content.vb: >-
      <ContractVerification(False)>

      Public Module AssertEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Diagnostics.Contracts.ContractVerificationAttribute
    ctor: System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
- uid: Xunit.AssertEx.Is``1(``0,``0)
  commentId: M:Xunit.AssertEx.Is``1(``0,``0)
  id: Is``1(``0,``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(T, T)
  nameWithType: AssertEx.Is<T>(T, T)
  fullName: Xunit.AssertEx.Is<T>(T, T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 142
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.Equal, if T is IEnumerable then compare value equality
  example: []
  syntax:
    content: public static void Is<T>(this T actual, T expected)
    parameters:
    - id: actual
      type: '{T}'
    - id: expected
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(actual As T, expected As T)
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(T, T)
  fullName.vb: Xunit.AssertEx.Is(Of T)(T, T)
  name.vb: Is(Of T)(T, T)
- uid: Xunit.AssertEx.Is``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  commentId: M:Xunit.AssertEx.Is``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  id: Is``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(T, Expression<Func<T, bool>>, string)
  nameWithType: AssertEx.Is<T>(T, Expression<Func<T, bool>>, string)
  fullName: Xunit.AssertEx.Is<T>(T, System.Linq.Expressions.Expression<System.Func<T, bool>>, string)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 156
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.True(predicate(value))
  example: []
  syntax:
    content: public static void Is<T>(this T value, Expression<Func<T, bool>> predicate, string message = "")
    parameters:
    - id: value
      type: '{T}'
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: message
      type: System.String
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(value As T, predicate As Expression(Of Func(Of T, Boolean)), message As String = "")
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(T, Expression(Of Func(Of T, Boolean)), String)
  fullName.vb: Xunit.AssertEx.Is(Of T)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), String)
  name.vb: Is(Of T)(T, Expression(Of Func(Of T, Boolean)), String)
- uid: Xunit.AssertEx.Is``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.AssertEx.Is``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Is``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(T, T, IEqualityComparer<T>)
  nameWithType: AssertEx.Is<T>(T, T, IEqualityComparer<T>)
  fullName: Xunit.AssertEx.Is<T>(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 182
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.Equal
  example: []
  syntax:
    content: public static void Is<T>(this T actual, T expected, IEqualityComparer<T> comparer)
    parameters:
    - id: actual
      type: '{T}'
    - id: expected
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(actual As T, expected As T, comparer As IEqualityComparer(Of T))
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(T, T, IEqualityComparer(Of T))
  fullName.vb: Xunit.AssertEx.Is(Of T)(T, T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Is(Of T)(T, T, IEqualityComparer(Of T))
- uid: Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: Is``1(System.Collections.Generic.IEnumerable{``0},``0[])
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(IEnumerable<T>, params T[])
  nameWithType: AssertEx.Is<T>(IEnumerable<T>, params T[])
  fullName: Xunit.AssertEx.Is<T>(System.Collections.Generic.IEnumerable<T>, params T[])
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 188
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.Equal(sequence value compare)
  example: []
  syntax:
    content: public static void Is<T>(this IEnumerable<T> actual, params T[] expected)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: expected
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(actual As IEnumerable(Of T), ParamArray expected As T())
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(IEnumerable(Of T), ParamArray T())
  fullName.vb: Xunit.AssertEx.Is(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray T())
  name.vb: Is(Of T)(IEnumerable(Of T), ParamArray T())
- uid: Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: AssertEx.Is<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: Xunit.AssertEx.Is<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 194
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.Equal(sequence value compare)
  example: []
  syntax:
    content: public static void Is<T>(this IEnumerable<T> actual, IEnumerable<T> expected)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(actual As IEnumerable(Of T), expected As IEnumerable(Of T))
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: Xunit.AssertEx.Is(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Is(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: AssertEx.Is<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: Xunit.AssertEx.Is<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 200
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.True(actual.SequenceEqual(expected, comparer))
  example: []
  syntax:
    content: public static void Is<T>(this IEnumerable<T> actual, IEnumerable<T> expected, IEqualityComparer<T> comparer)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(actual As IEnumerable(Of T), expected As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.AssertEx.Is(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Is(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Xunit.AssertEx.Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: Is``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: Is<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>)
  nameWithType: AssertEx.Is<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>)
  fullName: Xunit.AssertEx.Is<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Func<T, T, bool>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: Is
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 206
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.True(actual.SequenceEqual(expected, comparison))
  example: []
  syntax:
    content: public static void Is<T>(this IEnumerable<T> actual, IEnumerable<T> expected, Func<T, T, bool> equalityComparison)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: equalityComparison
      type: System.Func{{T},{T},System.Boolean}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [Is](Of T)(actual As IEnumerable(Of T), expected As IEnumerable(Of T), equalityComparison As Func(Of T, T, Boolean))
  overload: Xunit.AssertEx.Is*
  nameWithType.vb: AssertEx.Is(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: Xunit.AssertEx.Is(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  name.vb: Is(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: Xunit.AssertEx.IsNot``1(``0,``0)
  commentId: M:Xunit.AssertEx.IsNot``1(``0,``0)
  id: IsNot``1(``0,``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNot<T>(T, T)
  nameWithType: AssertEx.IsNot<T>(T, T)
  fullName: Xunit.AssertEx.IsNot<T>(T, T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNot
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 212
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.NotEqual, if T is IEnumerable then check value equality
  example: []
  syntax:
    content: public static void IsNot<T>(this T actual, T notExpected)
    parameters:
    - id: actual
      type: '{T}'
    - id: notExpected
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [IsNot](Of T)(actual As T, notExpected As T)
  overload: Xunit.AssertEx.IsNot*
  nameWithType.vb: AssertEx.IsNot(Of T)(T, T)
  fullName.vb: Xunit.AssertEx.IsNot(Of T)(T, T)
  name.vb: IsNot(Of T)(T, T)
- uid: Xunit.AssertEx.IsNot``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.AssertEx.IsNot``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  id: IsNot``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNot<T>(T, T, IEqualityComparer<T>)
  nameWithType: AssertEx.IsNot<T>(T, T, IEqualityComparer<T>)
  fullName: Xunit.AssertEx.IsNot<T>(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNot
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 226
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.NotEqual
  example: []
  syntax:
    content: public static void IsNot<T>(this T actual, T notExpected, IEqualityComparer<T> comparer)
    parameters:
    - id: actual
      type: '{T}'
    - id: notExpected
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [IsNot](Of T)(actual As T, notExpected As T, comparer As IEqualityComparer(Of T))
  overload: Xunit.AssertEx.IsNot*
  nameWithType.vb: AssertEx.IsNot(Of T)(T, T, IEqualityComparer(Of T))
  fullName.vb: Xunit.AssertEx.IsNot(Of T)(T, T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsNot(Of T)(T, T, IEqualityComparer(Of T))
- uid: Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: IsNot``1(System.Collections.Generic.IEnumerable{``0},``0[])
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNot<T>(IEnumerable<T>, params T[])
  nameWithType: AssertEx.IsNot<T>(IEnumerable<T>, params T[])
  fullName: Xunit.AssertEx.IsNot<T>(System.Collections.Generic.IEnumerable<T>, params T[])
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNot
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 232
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.NotEqual(sequence value compare)
  example: []
  syntax:
    content: public static void IsNot<T>(this IEnumerable<T> actual, params T[] notExpected)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: notExpected
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [IsNot](Of T)(actual As IEnumerable(Of T), ParamArray notExpected As T())
  overload: Xunit.AssertEx.IsNot*
  nameWithType.vb: AssertEx.IsNot(Of T)(IEnumerable(Of T), ParamArray T())
  fullName.vb: Xunit.AssertEx.IsNot(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray T())
  name.vb: IsNot(Of T)(IEnumerable(Of T), ParamArray T())
- uid: Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNot<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: AssertEx.IsNot<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: Xunit.AssertEx.IsNot<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNot
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 238
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.NotEqual(sequence value compare)
  example: []
  syntax:
    content: public static void IsNot<T>(this IEnumerable<T> actual, IEnumerable<T> notExpected)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: notExpected
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [IsNot](Of T)(actual As IEnumerable(Of T), notExpected As IEnumerable(Of T))
  overload: Xunit.AssertEx.IsNot*
  nameWithType.vb: AssertEx.IsNot(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: Xunit.AssertEx.IsNot(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsNot(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNot<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: AssertEx.IsNot<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: Xunit.AssertEx.IsNot<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNot
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 244
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.False(actual.SequenceEqual(notExpected, comparer))
  example: []
  syntax:
    content: public static void IsNot<T>(this IEnumerable<T> actual, IEnumerable<T> notExpected, IEqualityComparer<T> comparer)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: notExpected
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [IsNot](Of T)(actual As IEnumerable(Of T), notExpected As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Xunit.AssertEx.IsNot*
  nameWithType.vb: AssertEx.IsNot(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.AssertEx.IsNot(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsNot(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Xunit.AssertEx.IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: IsNot``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNot<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>)
  nameWithType: AssertEx.IsNot<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>)
  fullName: Xunit.AssertEx.IsNot<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Func<T, T, bool>)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNot
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 250
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.False(actual.SequenceEqual(notExpected, comparison))
  example: []
  syntax:
    content: public static void IsNot<T>(this IEnumerable<T> actual, IEnumerable<T> notExpected, Func<T, T, bool> equalityComparison)
    parameters:
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: notExpected
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: equalityComparison
      type: System.Func{{T},{T},System.Boolean}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub [IsNot](Of T)(actual As IEnumerable(Of T), notExpected As IEnumerable(Of T), equalityComparison As Func(Of T, T, Boolean))
  overload: Xunit.AssertEx.IsNot*
  nameWithType.vb: AssertEx.IsNot(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: Xunit.AssertEx.IsNot(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  name.vb: IsNot(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: Xunit.AssertEx.IsNull``1(``0)
  commentId: M:Xunit.AssertEx.IsNull``1(``0)
  id: IsNull``1(``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNull<T>(T)
  nameWithType: AssertEx.IsNull<T>(T)
  fullName: Xunit.AssertEx.IsNull<T>(T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNull
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 256
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.Null
  example: []
  syntax:
    content: public static void IsNull<T>(this T value)
    parameters:
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub IsNull(Of T)(value As T)
  overload: Xunit.AssertEx.IsNull*
  nameWithType.vb: AssertEx.IsNull(Of T)(T)
  fullName.vb: Xunit.AssertEx.IsNull(Of T)(T)
  name.vb: IsNull(Of T)(T)
- uid: Xunit.AssertEx.IsNotNull``1(``0)
  commentId: M:Xunit.AssertEx.IsNotNull``1(``0)
  id: IsNotNull``1(``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNotNull<T>(T)
  nameWithType: AssertEx.IsNotNull<T>(T)
  fullName: Xunit.AssertEx.IsNotNull<T>(T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNotNull
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 262
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.NotNull
  example: []
  syntax:
    content: public static void IsNotNull<T>(this T value)
    parameters:
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub IsNotNull(Of T)(value As T)
  overload: Xunit.AssertEx.IsNotNull*
  nameWithType.vb: AssertEx.IsNotNull(Of T)(T)
  fullName.vb: Xunit.AssertEx.IsNotNull(Of T)(T)
  name.vb: IsNotNull(Of T)(T)
- uid: Xunit.AssertEx.IsTrue(System.Boolean)
  commentId: M:Xunit.AssertEx.IsTrue(System.Boolean)
  id: IsTrue(System.Boolean)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsTrue(bool)
  nameWithType: AssertEx.IsTrue(bool)
  fullName: Xunit.AssertEx.IsTrue(bool)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsTrue
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 268
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Is(true)
  example: []
  syntax:
    content: public static void IsTrue(this bool value)
    parameters:
    - id: value
      type: System.Boolean
    content.vb: Public Shared Sub IsTrue(value As Boolean)
  overload: Xunit.AssertEx.IsTrue*
  nameWithType.vb: AssertEx.IsTrue(Boolean)
  fullName.vb: Xunit.AssertEx.IsTrue(Boolean)
  name.vb: IsTrue(Boolean)
- uid: Xunit.AssertEx.IsFalse(System.Boolean)
  commentId: M:Xunit.AssertEx.IsFalse(System.Boolean)
  id: IsFalse(System.Boolean)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsFalse(bool)
  nameWithType: AssertEx.IsFalse(bool)
  fullName: Xunit.AssertEx.IsFalse(bool)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsFalse
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 274
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Is(false)
  example: []
  syntax:
    content: public static void IsFalse(this bool value)
    parameters:
    - id: value
      type: System.Boolean
    content.vb: Public Shared Sub IsFalse(value As Boolean)
  overload: Xunit.AssertEx.IsFalse*
  nameWithType.vb: AssertEx.IsFalse(Boolean)
  fullName.vb: Xunit.AssertEx.IsFalse(Boolean)
  name.vb: IsFalse(Boolean)
- uid: Xunit.AssertEx.IsSameReferenceAs``1(``0,``0)
  commentId: M:Xunit.AssertEx.IsSameReferenceAs``1(``0,``0)
  id: IsSameReferenceAs``1(``0,``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsSameReferenceAs<T>(T, T)
  nameWithType: AssertEx.IsSameReferenceAs<T>(T, T)
  fullName: Xunit.AssertEx.IsSameReferenceAs<T>(T, T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsSameReferenceAs
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 280
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.Same
  example: []
  syntax:
    content: public static void IsSameReferenceAs<T>(this T actual, T expected)
    parameters:
    - id: actual
      type: '{T}'
    - id: expected
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub IsSameReferenceAs(Of T)(actual As T, expected As T)
  overload: Xunit.AssertEx.IsSameReferenceAs*
  nameWithType.vb: AssertEx.IsSameReferenceAs(Of T)(T, T)
  fullName.vb: Xunit.AssertEx.IsSameReferenceAs(Of T)(T, T)
  name.vb: IsSameReferenceAs(Of T)(T, T)
- uid: Xunit.AssertEx.IsNotSameReferenceAs``1(``0,``0)
  commentId: M:Xunit.AssertEx.IsNotSameReferenceAs``1(``0,``0)
  id: IsNotSameReferenceAs``1(``0,``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNotSameReferenceAs<T>(T, T)
  nameWithType: AssertEx.IsNotSameReferenceAs<T>(T, T)
  fullName: Xunit.AssertEx.IsNotSameReferenceAs<T>(T, T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNotSameReferenceAs
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 286
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.NotSame
  example: []
  syntax:
    content: public static void IsNotSameReferenceAs<T>(this T actual, T notExpected)
    parameters:
    - id: actual
      type: '{T}'
    - id: notExpected
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub IsNotSameReferenceAs(Of T)(actual As T, notExpected As T)
  overload: Xunit.AssertEx.IsNotSameReferenceAs*
  nameWithType.vb: AssertEx.IsNotSameReferenceAs(Of T)(T, T)
  fullName.vb: Xunit.AssertEx.IsNotSameReferenceAs(Of T)(T, T)
  name.vb: IsNotSameReferenceAs(Of T)(T, T)
- uid: Xunit.AssertEx.IsInstanceOf``1(System.Object)
  commentId: M:Xunit.AssertEx.IsInstanceOf``1(System.Object)
  id: IsInstanceOf``1(System.Object)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsInstanceOf<TExpected>(object)
  nameWithType: AssertEx.IsInstanceOf<TExpected>(object)
  fullName: Xunit.AssertEx.IsInstanceOf<TExpected>(object)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsInstanceOf
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 292
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.IsType
  example: []
  syntax:
    content: public static TExpected IsInstanceOf<TExpected>(this object value)
    parameters:
    - id: value
      type: System.Object
    typeParameters:
    - id: TExpected
    return:
      type: '{TExpected}'
    content.vb: Public Shared Function IsInstanceOf(Of TExpected)(value As Object) As TExpected
  overload: Xunit.AssertEx.IsInstanceOf*
  nameWithType.vb: AssertEx.IsInstanceOf(Of TExpected)(Object)
  fullName.vb: Xunit.AssertEx.IsInstanceOf(Of TExpected)(Object)
  name.vb: IsInstanceOf(Of TExpected)(Object)
- uid: Xunit.AssertEx.IsNotInstanceOf``1(System.Object)
  commentId: M:Xunit.AssertEx.IsNotInstanceOf``1(System.Object)
  id: IsNotInstanceOf``1(System.Object)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNotInstanceOf<TWrong>(object)
  nameWithType: AssertEx.IsNotInstanceOf<TWrong>(object)
  fullName: Xunit.AssertEx.IsNotInstanceOf<TWrong>(object)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNotInstanceOf
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 299
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert.IsNotType
  example: []
  syntax:
    content: public static void IsNotInstanceOf<TWrong>(this object value)
    parameters:
    - id: value
      type: System.Object
    typeParameters:
    - id: TWrong
    content.vb: Public Shared Sub IsNotInstanceOf(Of TWrong)(value As Object)
  overload: Xunit.AssertEx.IsNotInstanceOf*
  nameWithType.vb: AssertEx.IsNotInstanceOf(Of TWrong)(Object)
  fullName.vb: Xunit.AssertEx.IsNotInstanceOf(Of TWrong)(Object)
  name.vb: IsNotInstanceOf(Of TWrong)(Object)
- uid: Xunit.AssertEx.IsStructuralEqual(System.Object,System.Object,System.String)
  commentId: M:Xunit.AssertEx.IsStructuralEqual(System.Object,System.Object,System.String)
  id: IsStructuralEqual(System.Object,System.Object,System.String)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsStructuralEqual(object, object, string)
  nameWithType: AssertEx.IsStructuralEqual(object, object, string)
  fullName: Xunit.AssertEx.IsStructuralEqual(object, object, string)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsStructuralEqual
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 358
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert by deep recursive value equality compare
  example: []
  syntax:
    content: public static void IsStructuralEqual(this object actual, object expected, string message = "")
    parameters:
    - id: actual
      type: System.Object
    - id: expected
      type: System.Object
    - id: message
      type: System.String
    content.vb: Public Shared Sub IsStructuralEqual(actual As Object, expected As Object, message As String = "")
  overload: Xunit.AssertEx.IsStructuralEqual*
  nameWithType.vb: AssertEx.IsStructuralEqual(Object, Object, String)
  fullName.vb: Xunit.AssertEx.IsStructuralEqual(Object, Object, String)
  name.vb: IsStructuralEqual(Object, Object, String)
- uid: Xunit.AssertEx.IsNotStructuralEqual(System.Object,System.Object,System.String)
  commentId: M:Xunit.AssertEx.IsNotStructuralEqual(System.Object,System.Object,System.String)
  id: IsNotStructuralEqual(System.Object,System.Object,System.String)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: IsNotStructuralEqual(object, object, string)
  nameWithType: AssertEx.IsNotStructuralEqual(object, object, string)
  fullName: Xunit.AssertEx.IsNotStructuralEqual(object, object, string)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: IsNotStructuralEqual
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 382
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: Assert by deep recursive value equality compare
  example: []
  syntax:
    content: public static void IsNotStructuralEqual(this object actual, object expected, string message = "")
    parameters:
    - id: actual
      type: System.Object
    - id: expected
      type: System.Object
    - id: message
      type: System.String
    content.vb: Public Shared Sub IsNotStructuralEqual(actual As Object, expected As Object, message As String = "")
  overload: Xunit.AssertEx.IsNotStructuralEqual*
  nameWithType.vb: AssertEx.IsNotStructuralEqual(Object, Object, String)
  fullName.vb: Xunit.AssertEx.IsNotStructuralEqual(Object, Object, String)
  name.vb: IsNotStructuralEqual(Object, Object, String)
- uid: Xunit.AssertEx.AsDynamic``1(``0)
  commentId: M:Xunit.AssertEx.AsDynamic``1(``0)
  id: AsDynamic``1(``0)
  isExtensionMethod: true
  parent: Xunit.AssertEx
  langs:
  - csharp
  - vb
  name: AsDynamic<T>(T)
  nameWithType: AssertEx.AsDynamic<T>(T)
  fullName: Xunit.AssertEx.AsDynamic<T>(T)
  type: Method
  source:
    remote:
      path: RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
      branch: master
      repo: https://github.com/aaaa777/rudeus-client.git
    id: AsDynamic
    path: ../RudeusBgInitializerTest/Plugins/ChainingAssertion.cs
    startLine: 506
  assemblies:
  - RudeusBgInitializerTest
  namespace: Xunit
  summary: to DynamicAccessor that can call private method/field/property/indexer.
  example: []
  syntax:
    content: public static dynamic AsDynamic<T>(this T target)
    parameters:
    - id: target
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: dynamic
    content.vb: Public Shared Function AsDynamic(Of T)(target As T) As Object
  overload: Xunit.AssertEx.AsDynamic*
  nameWithType.vb: AssertEx.AsDynamic(Of T)(T)
  fullName.vb: Xunit.AssertEx.AsDynamic(Of T)(T)
  name.vb: AsDynamic(Of T)(T)
references:
- uid: Xunit
  commentId: N:Xunit
  href: Xunit.html
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.AssertEx.Is*
  commentId: Overload:Xunit.AssertEx.Is
  href: Xunit.AssertEx.html#Xunit_AssertEx_Is__1___0___0_
  name: Is
  nameWithType: AssertEx.Is
  fullName: Xunit.AssertEx.Is
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{``0,``0,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, T, bool>
  nameWithType: Func<T, T, bool>
  fullName: System.Func<T, T, bool>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Xunit.AssertEx.IsNot*
  commentId: Overload:Xunit.AssertEx.IsNot
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsNot__1___0___0_
  name: IsNot
  nameWithType: AssertEx.IsNot
  fullName: Xunit.AssertEx.IsNot
- uid: Xunit.AssertEx.IsNull*
  commentId: Overload:Xunit.AssertEx.IsNull
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsNull__1___0_
  name: IsNull
  nameWithType: AssertEx.IsNull
  fullName: Xunit.AssertEx.IsNull
- uid: Xunit.AssertEx.IsNotNull*
  commentId: Overload:Xunit.AssertEx.IsNotNull
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsNotNull__1___0_
  name: IsNotNull
  nameWithType: AssertEx.IsNotNull
  fullName: Xunit.AssertEx.IsNotNull
- uid: Xunit.AssertEx.IsTrue*
  commentId: Overload:Xunit.AssertEx.IsTrue
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsTrue_System_Boolean_
  name: IsTrue
  nameWithType: AssertEx.IsTrue
  fullName: Xunit.AssertEx.IsTrue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Xunit.AssertEx.IsFalse*
  commentId: Overload:Xunit.AssertEx.IsFalse
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsFalse_System_Boolean_
  name: IsFalse
  nameWithType: AssertEx.IsFalse
  fullName: Xunit.AssertEx.IsFalse
- uid: Xunit.AssertEx.IsSameReferenceAs*
  commentId: Overload:Xunit.AssertEx.IsSameReferenceAs
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsSameReferenceAs__1___0___0_
  name: IsSameReferenceAs
  nameWithType: AssertEx.IsSameReferenceAs
  fullName: Xunit.AssertEx.IsSameReferenceAs
- uid: Xunit.AssertEx.IsNotSameReferenceAs*
  commentId: Overload:Xunit.AssertEx.IsNotSameReferenceAs
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsNotSameReferenceAs__1___0___0_
  name: IsNotSameReferenceAs
  nameWithType: AssertEx.IsNotSameReferenceAs
  fullName: Xunit.AssertEx.IsNotSameReferenceAs
- uid: Xunit.AssertEx.IsInstanceOf*
  commentId: Overload:Xunit.AssertEx.IsInstanceOf
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsInstanceOf__1_System_Object_
  name: IsInstanceOf
  nameWithType: AssertEx.IsInstanceOf
  fullName: Xunit.AssertEx.IsInstanceOf
- uid: '{TExpected}'
  commentId: '!:TExpected'
  definition: TExpected
  name: TExpected
  nameWithType: TExpected
  fullName: TExpected
- uid: TExpected
  name: TExpected
  nameWithType: TExpected
  fullName: TExpected
- uid: Xunit.AssertEx.IsNotInstanceOf*
  commentId: Overload:Xunit.AssertEx.IsNotInstanceOf
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsNotInstanceOf__1_System_Object_
  name: IsNotInstanceOf
  nameWithType: AssertEx.IsNotInstanceOf
  fullName: Xunit.AssertEx.IsNotInstanceOf
- uid: Xunit.AssertEx.IsStructuralEqual*
  commentId: Overload:Xunit.AssertEx.IsStructuralEqual
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsStructuralEqual_System_Object_System_Object_System_String_
  name: IsStructuralEqual
  nameWithType: AssertEx.IsStructuralEqual
  fullName: Xunit.AssertEx.IsStructuralEqual
- uid: Xunit.AssertEx.IsNotStructuralEqual*
  commentId: Overload:Xunit.AssertEx.IsNotStructuralEqual
  href: Xunit.AssertEx.html#Xunit_AssertEx_IsNotStructuralEqual_System_Object_System_Object_System_String_
  name: IsNotStructuralEqual
  nameWithType: AssertEx.IsNotStructuralEqual
  fullName: Xunit.AssertEx.IsNotStructuralEqual
- uid: Xunit.AssertEx.AsDynamic*
  commentId: Overload:Xunit.AssertEx.AsDynamic
  href: Xunit.AssertEx.html#Xunit_AssertEx_AsDynamic__1___0_
  name: AsDynamic
  nameWithType: AssertEx.AsDynamic
  fullName: Xunit.AssertEx.AsDynamic
- uid: dynamic
  commentId: T:System.Object
  isExternal: true
  name: dynamic
  nameWithType: dynamic
  fullName: dynamic
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
