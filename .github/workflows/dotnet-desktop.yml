# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]
        #configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Rudeus.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      #Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      #Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      #Wap_Project_Path:   your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the application
    - name: Build the application
      run: dotnet build --no-restore -c ${{ matrix.configuration }}

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --no-build --verbosity normal -c ${{ matrix.configuration }}

    # Compile installer

    # Zip installer
    #- uses: montudor/action-zip@v1
    #  with:
    #    args: zip -r RudeusLauncher.zip net7.0-windows10.0.17763.0\*
    - name: Zip artifacts
      run: |
        Compress-Archive -Path RudeusLauncher\bin\${{ matrix.configuration }}\net7.0-windows10.0.17763.0\* -Destination RudeusLauncher${{ matrix.configuration }}.zip
        Compress-Archive -Path RudeusBg\bin\${{ matrix.configuration }}\net7.0-windows10.0.17763.0\win-x64\* -Destination RudeusBg${{ matrix.configuration }}.zip
        Compress-Archive -Path RudeusBgForm\bin\${{ matrix.configuration }}\net7.0-windows10.0.17763.0\win-x64\* -Destination RudeusBgForm${{ matrix.configuration }}.zip
        Compress-Archive -Path RudeusBgInitializer\bin\${{ matrix.configuration }}\net7.0-windows10.0.17763.0\win-x64\* -Destination RudeusBgInitializer${{ matrix.configuration }}.zip
        Compress-Archive -Path RudeusBgInitializer${{ matrix.configuration }}.zip,RudeusBg${{ matrix.configuration }}.zip,RudeusBgForm${{ matrix.configuration }}.zip,RudeusLauncher${{ matrix.configuration }}.zip -Destination RudeusPackage${{ matrix.configuration }}.zip
    
    # Create release
    #- name: Create release in github
    #  id: create_release
    #  uses: actions/create-release@v1.0.0
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESSTOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    body: |
    #      Built automatically.
    #    draft: false
    #    prerelease: false

    # Upload release file
    #- name: Upload Release Asset
    #  id: upload-release-asset-linux
    #  uses: actions/upload-release-asset@v1.0.2
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESSTOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: .\RudeusLauncher\bin\Release\RudeusLauncher.zip
    #    asset_name: RudeusLauncher.zip
    #    asset_content_type: application/zip
    - name: Delete old assets
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ github.token }}
        tag: latest # This may also be of the form 'refs/tags/staging'

        # Optional another repository
        #repository: aaaa777/rudeus-client

        # Pick one of:
        assets: Rudeus_launcher_head_${{ matrix.configuration }}.zip

        fail-if-no-assets: false
    # 
    - name: Deploy Windows release
      #if: matrix.os == 'windows-latest'
      uses: WebFreak001/deploy-nightly@v2.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: https://uploads.github.com/repos/aaaa777/rudeus-client/releases/132351782/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
        release_id: 132351782 # same as above (id can just be taken out the upload_url, it's used to find old releases)
        asset_path: .\RudeusPackage${{ matrix.configuration }}.zip # path to archive to upload
        #asset_name: Rudeus_launcher-${{ matrix.configuration }}-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_name: Rudeus_launcher_head_${{ matrix.configuration }}.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/zip # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path "." -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: 'Run Test Script'
      run: |
        Copy-Item -Path C:/"Program Files (x86)"/"Windows Kits"/10/bin/10.0.22621.0/x86/signtool.exe -Destination .

    - name: Compile Inno Setup
    #  run: iscc.exe /?
      run: iscc.exe '/Ssigntool2=$p .\signtool.exe sign /v /f $q.\GitHubActionsWorkflow.pfx$q /p ${{ secrets.Pfx_Passphrase }} /t http://timestamp.comodoca.com/authenticode /d $qSystem Program$q /fd SHA256 $f' InnoSetupConfig.iss
    # Create the app package by building and packaging the Windows Application Packaging project
    #- name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    Appx_Bundle: Always
    #    Appx_Bundle_Platforms: x86|x64
    #    Appx_Package_Build_Mode: StoreUpload
    #    Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path .\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages
